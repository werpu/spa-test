{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/Documents/open-spa-test/spa-test/messaging/src/main/typescript/MessageWrapper.ts","webpack:///src/main/typescript/Users/werpu2/Documents/open-spa-test/spa-test/messaging/src/main/typescript/Direction.ts","webpack:///src/main/typescript/Users/werpu2/Documents/open-spa-test/spa-test/messaging/src/main/typescript/Broker.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","message","this","detail","bubbles","cancelable","composed","MessageWrapper","Direction","wnd","messageListeners","processedMessages","cleanupCnt","isShadowDom","evtHandler","event","details","data","identifier","msg","broadcast","DOWN","host","setAttribute","addEventListener","Broker","EVENT_TYPE","evt","capture","registerListener","channel","listener","reserveListenerNS","push","gcProcessedMessages","newProcessedMessages","Date","getMilliseconds","unregisterListener","filter","item","direction","callBrokerListeners","dispatchDown","UP","dispatchUp","BOTH","dispatchBoth","ignoreListeners","callListeners","creationDate","window","parent","postMessage","dispatchSameLevel","transformToEvent","dispatchEvent","document","querySelectorAll","forEach","element","contentWindow","listeners","length","messageWrapper","createCustomEvent","wrapper","CustomEvent","e","createEvent","initEvent"],"mappings":"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","file":"Broker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * custom dom event wrapping our messages\n */\nimport {Message} from \"./Message\";\n\nexport class MessageWrapper implements CustomEventInit<Message> {\n\n    detail?: Message;\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n\n\n    constructor(message: Message) {\n        this.detail = message;\n        this.bubbles = true;\n        this.cancelable = true;\n        this.composed = true;\n    }\n}","export enum Direction {\n    UP, DOWN, BOTH\n}","/**\n * Universal message broker which allows to send messages\n *\n */\nimport {Message} from \"./Message\";\nimport {MessageWrapper} from \"./MessageWrapper\";\nimport {Direction} from \"./Direction\";\n\n\n/**\n * central message broker which uses various dom constructs\n * to broadcast messages into subelements\n *\n * we use the dom event system as transport and encapsule iframe and shadow dom mechanisms in a transparent way to\n * pull this off\n *\n *\n *\n * usage\n *\n * broker = new Broker(optional rootElement)\n *\n * defines a message broker within a scope of rootElment (without it is window aka the current isolation level)\n *\n * broker.registerListener(channel, listener) registers a new listener to the current broker and channel\n * broker.unregisterListener(channel, listener) unregisters the given listener\n *\n * broker.broadcast(message, optional direction, optional callBrokerListeners)\n * sends a message (channel included in the message object) in a direction (up, down, both)\n * and also optionally calls the listeners on the same broker (default off)\n *\n * the flow is like\n * up messages are propagated upwards only until it reaches the outer top of the dom\n * downards, the messages are propagaed downwards only\n * both the message is propagated into both directions\n *\n * Usually messages sent from the same broker are not processed within... however by setting\n * callBrokerListeners to true the listeners on the same broker also are called\n * brokers on the same level will get the message and process it automatically no matter what.\n * That way you can exclude the source from message processing (and it is done that way automatically)\n *\n * Isolation levels. Usually every isolation level needs its own broker object registering\n * on the outer bounds\n *\n * aka documents will register on window\n * iframes on the iframe windowObject\n * isolated shadow doms... document\n *\n *\n */\nexport class Broker {\n\n    static readonly EVENT_TYPE = \"brokerEvent\";\n\n\n    /**\n     * we can split the listeners with the system\n     * namespace... and type (aka identifier criteria)\n     */\n    private messageListeners: any = {};\n\n    private processedMessages: any = {};\n\n\n    private cleanupCnt = 0;\n\n    isShadowDom = false;\n\n\n    constructor(wnd: HTMLElement | Window | ShadowRoot = window, public name=\"brokr\") {\n\n        let evtHandler = (event: MessageEvent | CustomEvent<Message>) => {\n            let details = (<CustomEvent>event)?.detail || (<MessageEvent>event)?.data;\n            //javascript loses the type info in certain module types\n            if (details?.identifier && details?.message) {\n\n                let msg: Message = details;\n                if (msg.identifier in this.processedMessages) {\n                    return;\n                }\n                //coming in from up... we need to send it down\n                //a relayed message always has to trigger the listeners as well\n                this.broadcast(msg, Direction.DOWN, false);\n            }\n        };\n\n        if((<any>wnd).host) {\n            let host = (<ShadowRoot>wnd).host;\n            host.setAttribute(\"data-broker\", \"1\");\n            host.addEventListener(Broker.EVENT_TYPE, (evt: MessageEvent) =>  evtHandler(evt), {capture: true});\n            host.addEventListener(\"message\", (evt: MessageEvent) =>  evtHandler(evt), {capture: true});\n\n        } else {\n            wnd.addEventListener(Broker.EVENT_TYPE, (evt: MessageEvent) =>  evtHandler(evt), {capture: true});\n            wnd.addEventListener(\"message\", (evt: MessageEvent) =>  evtHandler(evt), {capture: true});\n        }\n    }\n\n    registerListener(channel: string, listener: (msg: Message) => void) {\n        this.reserveListenerNS(channel);\n\n        //we skip the processed messages, because they originated here\n        //and already are processed\n        this.messageListeners[channel].push((msg: Message) => {\n            if (msg.identifier in this.processedMessages) {\n                return;\n            }\n            listener(msg);\n        });\n    }\n\n    gcProcessedMessages() {\n        if ((++this.cleanupCnt) % 10 != 0) {\n            return;\n        }\n        let newProcessedMessages: any = {};\n        for (let key in this.processedMessages) {\n            if (this.processedMessages[key] < ((new Date()).getMilliseconds() - 1000)) continue;\n            newProcessedMessages[key] = this.processedMessages[key];\n        }\n        this.processedMessages = newProcessedMessages;\n    }\n\n    unregisterListener(channel: string, listener: (msg: Message) => void) {\n        this.messageListeners = (this.messageListeners[channel] || []).filter((item: any) => item !== listener);\n    }\n\n    broadcast(message: Message, direction: Direction = Direction.DOWN, callBrokerListeners = true) {\n\n        switch (direction) {\n            case Direction.DOWN:\n                this.dispatchDown(message, callBrokerListeners);\n                break;\n            case Direction.UP:\n                this.dispatchUp(message, callBrokerListeners)\n                break;\n            case Direction.BOTH:\n                this.dispatchBoth(message, callBrokerListeners);\n                break;\n        }\n\n\n        this.gcProcessedMessages();\n    }\n\n    private dispatchBoth(message: Message, ignoreListeners = true) {\n\n        this.dispatchUp(message, ignoreListeners, true);\n        //listeners already called\n        this.dispatchDown(message, true, false)\n    }\n\n    private dispatchUp(message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.callListeners(message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n\n        if (window.parent != null) {\n            window.parent.postMessage(message, \"*\");\n        }\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(message);\n        }\n    }\n\n    private dispatchSameLevel(message: Message) {\n        let event = this.transformToEvent(message, true);\n        //we also dispatch sideways\n        window.dispatchEvent(event);\n    }\n\n//a dispatch of our own should never trigger the listeners hence the default true\n    private dispatchDown(message: Message, ignoreListeners = true, callBrokerListeners = true) {\n        if (!ignoreListeners) {\n            this.callListeners(message);\n        }\n        this.processedMessages[message.identifier] = message.creationDate;\n        let evt = this.transformToEvent(message);\n        window.dispatchEvent(evt);\n        /*we now notify all iframes lying underneath */\n        document.querySelectorAll(\"iframe\").forEach((element: HTMLIFrameElement) => {\n            element.contentWindow.postMessage(message, \"*\")\n        });\n\n        document.querySelectorAll(\"[data-broker='1']\").forEach((element: HTMLElement) => element.dispatchEvent(evt))\n\n        if (callBrokerListeners) {\n            this.dispatchSameLevel(message);\n        }\n    }\n\n    private callListeners(message: Message) {\n        let listeners = this.messageListeners[message.channel];\n        if (listeners?.length) {\n            let callElement = (element: (msg: Message) => void) => {\n                element(message);\n            }\n\n            listeners.forEach(callElement);\n        }\n    }\n\n    private transformToEvent(message: Message, bubbles = false): CustomEvent {\n        let messageWrapper = new MessageWrapper(message);\n        messageWrapper.bubbles = bubbles;\n        return this.createCustomEvent(Broker.EVENT_TYPE, messageWrapper);\n    }\n\n    private createCustomEvent(name: string, wrapper: any): any {\n        if ('undefined' == typeof window.CustomEvent) {\n            let e: any = document.createEvent('HTMLEvents');\n            e.detail = wrapper.detail;\n            e.initEvent(name, wrapper.bubbles, wrapper.cancelable);\n            return e;\n\n        } else {\n            return new window.CustomEvent(name, wrapper);\n        }\n\n    }\n\n    /**\n     * reserves the listener namespace and wildcard namespace for the given identifier\n     * @param identifier\n     * @private\n     */\n    private reserveListenerNS(identifier: string) {\n        if (!this.messageListeners[identifier]) {\n            this.messageListeners[identifier] = [];\n        }\n        if (!this.messageListeners[\"*\"]) {\n            this.messageListeners[\"*\"] = [];\n        }\n    }\n}"],"sourceRoot":""}