{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Monad.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Stream.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/SourcesCollectors.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/Lang.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/DomQuery.ts","webpack:///src/main/typescript/Users/werpu2/development/workspace/monadish/src/main/typescript/XmlQuery.ts"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","objAssign","Lang","this","_value","map","fn","inval","Monad","flatMap","mapped","fromNullable","Optional","isAbsent","isPresent","presentRunnable","absent","ifPresentLazy","orElse","elseValue","orElseLazy","func","val","getIf","currentPos","cnt","length","currKey","keyVal","arrPos","arrayIndex","getClass","Array","getIfPresent","match","defaultVal","toJson","JSON","stringify","start","indexOf","end","parseInt","substring","resolve","resolver","e","rootElem","valueKey","newVal","alternative","ValueEmbedder","ConfigEntry","Config","Stream","ofAssoc","collect","AssocArrayCollector","shallowMerge","other","overwrite","withAppend","isArray","of","each","item","append","assign","noKeys","keys","lastKey","pathExists","buildPath","finalKeyArrPos","Error","push","retVal","apply","slice","appendIf","condition","assignIf","delete","setVal","parentVal","parentPos","alloc","arr","length1","length2","tempVal","_limits","pos","data","ofDataSource","dataSource","hasNext","next","limits","concat","toAppend","onElem","res","ret","strmR","filter","reduce","startVal","offset","val1","first","last","Math","min","anyMatch","allMatch","matches","noneMatch","sort","comparator","newArr","collector","finalValue","isLimitsReached","isEndOfArray","reset","parent","LazyStream","ArrayStreamDataSource","values","ofStreamDataSource","isOverLimits","nextFilter","max","MappedStreamDataSource","el","stop","FilteredStreamDatasource","FlatMapStreamDataSource","value1","value2","el1","el2","ArrayCollector","total","SequenceDataSource","dataPos","filterFunc","filteredNext","inputDataSource","mapFunc","resolveCurrentNext","resolveNextNext","activeDataSource","element","Run","FormData","FormDataCollector","toMerge","encodeFormElement","QueryFormDataCollector","formData","join","item1","item2","QueryFormStringCollector","trim","str","ws","replace","test","charAt","isString","it","arguments","String","saveResolve","resolverProducer","defaultValue","result","saveResolveLazy","strToArray","splitter","split","forEach","objToArray","obj","pack","equalsIgnoreCase","source","destination","finalDest","toLowerCase","assertType","probe","theType","isFunc","Function","target","TypeError","to","theArgs","nextSource","nextKey","Submittables","getAttribute","setAttribute","ElementAttribute","DEFAULT_JSF_WHITELIST","src","rootNode","foundElement","DomQuery","querySelectorAll","getAsElem","allElems","isTag","tagName","nodeName","checked","newChecked","eachElem","querySelectorAllDeep","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","attr","disabled","removeAttribute","childNodeArr","childNodes","asArray","byId","selector","document","_querySelectorAllDeep","_querySelectorAll","deep","byIdDeep","byTagName","globalEval","code","nonce","fromMarkup","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","innerHTML","startsWithTag","tag1","tag2","dummyPlaceHolder","createElement","html","detach","index","defaults","filesFromElem","files","node","parentNode","removeChild","nodes","foundNodes","selectors","cnt2","levelSelector","id","includeRoot","subItems","reduction","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","isMultipartCandidate","stream","firstElem","isCandidate","innerHtml","dispatchEvent","evt","elem","retArr","inVal","_mozMatchesSelector","toMatch","prot","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","ownerDocument","filterSelector","matched","selectorStage","nodeSelector","len","reArr","head","getElementsByTagName","script","type","newScriptElement","appendChild","appendTo","theItem","loadScriptEval","defer","charSet","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","responseData","setTimeout","responseText","onerror","insertAfter","existingItem","existingElement","nextSibling","toInsertParams","insertElem","insertBefore","parents","retSet","Set","lowerTagName","resolveItem","has","host","copyAttrs","sourceItem","sourceNode","attrs","attributes","resolveAttributeHolder","attrName","outerHTML","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","toReplace","firstInsert","replaced","replaceChild","insertAdditionalItems","runScripts","runCss","focusElement","setCaretPosition","whilteListed","finalScripts","equi","execScrpt","itemType","evalText","text","innerText","go","node1","node2","compareDocumentPosition","console","error","message","description","applyStyle","style","newSS","styleSheet","sheet","cssText","createTextNode","child","execCss","click","fireEvent","addEventListener","listener","options","removeEventListener","eventName","nodeType","eventClass","createEvent","initEvent","synthetic","createEventObject","textContent","joinstr","text1","text2","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","inputValue","lazyStream","reduced","subNodes","from","attachShadow","params","shadowElement","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","DomQueryCollector","DQ","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","contentType","loadXML","isXMLParserError","toString","serialized","XMLSerializer","constructor","serializeToString","parserErrorText","parseXML","txt","XMLQuery","parseHTML","fromString","parseType","XQ"],"mappings":"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","file":"XmlQuery.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<T>(value?: T): Optional<T> {\n        return new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<T>(value?: any, valueKey: string = \"value\"): ValueEmbedder<T> {\n        return new ValueEmbedder(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any) {\n        super(root);\n    }\n\n    get shallowCopy(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    get deepCopy(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    static fromNullable<T>(value?: any): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param keys\n     */\n    append(...keys): IValueHolder<any> {\n        let noKeys = keys.length < 1;\n        if (noKeys) {\n            return;\n        }\n\n        let lastKey = keys[keys.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...keys).isPresent();\n        this.buildPath(keys);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...keys).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...keys).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    appendIf(condition: boolean, ...keys): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...keys);\n    }\n\n    assign(...keys): IValueHolder<any> {\n        if (keys.length < 1) {\n            return;\n        }\n\n        this.buildPath(keys);\n\n        let currKey = this.keyVal(keys[keys.length - 1]);\n        let arrPos = this.arrayIndex(keys[keys.length - 1]);\n        let retVal = new ConfigEntry(keys.length == 1 ? this.value : this.getIf.apply(this, keys.slice(0, keys.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n    assignIf(condition: boolean, ...keys: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...keys) : {value: null};\n    }\n\n    getIf(...keys: Array<string>): Config {\n        return this.getClass().fromNullable(super.getIf.apply(this, keys).value);\n    }\n\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n    /**\n     * builds the config path\n     *\n     * @param keys a sequential array of keys containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(keys: Array<any>): Config {\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < keys.length; cnt++) {\n            let currKey = this.keyVal(keys[cnt]);\n            let arrPos = this.arrayIndex(keys[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (arrPos == -1) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource, FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    MappedStreamDataSource\n} from \"./SourcesCollectors\";\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T,V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n    \n    \n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next());\n        }\n\n        return new Stream(...value);\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        //let dataSource = new MultiStreamDatasource<T>(this, ...toAppend);\n        //return Stream.ofDataSource<T>(dataSource);\n\n        return Stream.of(<IStream<T>> this, ...toAppend).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item, cnt) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(...strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        return Optional.fromNullable<V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: {[key: string]: T}): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = 0;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.of(<IStream<T>> this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next();\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next()) === false) {\n                this.stop();\n            }\n        }\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1 = null;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next());\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next())) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IStream, LazyStream, Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\nimport {Optional} from \"./Monad\";\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present\n     */\n    hasNext(): boolean;\n\n    /**\n     * false if not\n     */\n    next(): T;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < this.total;\n    }\n\n    next(): number {\n        return Math.min(this.value++, this.total - 1);\n    }\n\n    reset(): void {\n        this.value = 0;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T {\n        this.dataPos++;\n        return this.value[this.dataPos];\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n}\n\n/**\n * an intermediate data source wich prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    filteredNext: T = null;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        while (this.filteredNext == null && this.inputDataSource.hasNext()) {\n            let next: T = <T>this.inputDataSource.next();\n            if (this.filterFunc(next)) {\n                this.filteredNext = next;\n                return true;\n            } else {\n                this.filteredNext = null;\n            }\n        }\n        return this.filteredNext != null;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T {\n        let ret = this.filteredNext;\n        this.filteredNext = null;\n        //We have to call hasNext, to roll another\n        //prefetch in case someone runs next\n        //sequentially without calling hasNext\n        this.hasNext();\n        return ret;\n    }\n\n    reset(): void {\n        this.filteredNext = null;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveCurrentNext() || this.resolveNextNext();\n    }\n\n    private resolveCurrentNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    private resolveNextNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next());\n            if (Array.isArray(mapped)) {\n                this.activeDataSource = new ArrayStreamDataSource(...mapped);\n            } else {\n                this.activeDataSource = mapped;\n            }\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S {\n        return this.activeDataSource.next();\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {ArrayCollector, ICollector, IStreamDataSource} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\nimport objToArray = Lang.objToArray;\nimport isString = Lang.isString;\nimport equalsIgnoreCase = Lang.equalsIgnoreCase;\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum Submittables {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n// @ts-ignore supression needed here due to fromnullable\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @param src\n * @constructor\n */\nconst DEFAULT_JSF_WHITELIST = (src: string) => {\n    return (src.indexOf(\"ln=scripts\") == -1 &&\n        src.indexOf(\"ln=javax.faces\") == -1) ||\n        (src.indexOf(\"/jsf.js\") == -1 &&\n            src.indexOf(\"/jsf-uncompressed.js\") == -1);\n};\n\ninterface IDomQuery {\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The the value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n    /**\n     * the underlying form elements as domquery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded (highest level)\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchevent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery): void;\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the domquery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n    /**\n     * all parents with TagName\n     * @param tagName\n     */\n    parents(tagName: string): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another domquery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinstr?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinstr?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the subnodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * TODO add jquery fallback support, since it is supported\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a little bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery> {\n\n    static absent = new DomQuery();\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            //we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        //a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow doms\n     * separately and runs the query on earch shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if(queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if(shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if(shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n\n    /**\n     * todo align this api with the rest of the apis\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        //filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => item != null)\n            .map(item => DomQuery.byId(item)).collect(new ArrayCollector()));\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the marku code\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        //https://developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.indexOf('<!doctype') != -1 ||\n            lowerMarkup.indexOf('<html') != -1 ||\n            lowerMarkup.indexOf('<head') != -1 || //TODO proper regexps here to avoid embedded tags with same element names to be triggered\n            lowerMarkup.indexOf('<body') != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            //table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as domquery\n     * from the internal elements\n     * note if you try to reach a non existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given elmement\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ?  (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active dopmquery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        //We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n\n    /*deep with a selector and a peudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let nodes = [];\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        //for some strange kind of reason the # selector fails\n        //on hidden elements we use the attributes match selector\n        //that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if(subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any> LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    /**\n     * hasclass, checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        let isCandidate = (item: DomQuery): boolean => {\n            if(item.length == 0) {\n                return false;\n            }\n            if(item.length == 1) {\n                if ((<string>item.tagName.get(\"booga\").value).toLowerCase() == \"input\" &&\n                    (<string>item.attr(\"type\")?.value || \"\").toLowerCase() == \"file\") {\n                    return true;\n                }\n                if (deep) {\n                    return this.querySelectorAllDeep(\"input[type='file']\").firstElem().isPresent();\n                } else {\n                    return this.querySelectorAll(\"input[type='file']\").firstElem().isPresent();\n                }\n            }\n            return item.isMultipartCandidate(deep);\n        };\n        let ret = this.stream.filter(item => isCandidate(item)).first().isPresent();\n\n        return ret;\n    }\n\n\n\n    /**\n     * innerHtml equivalkent\n     * equivalent to jqueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param inval\n     */\n    html(inval?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(inval).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHtml) : Optional.absent;\n        }\n        this.innerHtml = inval;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    set innerHtml(inVal: string) {\n        this.eachElem(elem => elem.innerHTML = inVal);\n    }\n\n    get innerHtml(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    //source: https://developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    //code snippet license: https://creativecommons.org/licenses/by-sa/2.5/\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prot: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prot.matchesSelector ||\n            prot.mozMatchesSelector ||\n            prot.msMatchesSelector ||\n            prot.oMatchesSelector ||\n            prot.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || (<any>window).ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    matchesSelector(selector: string): boolean {\n        this.eachElem(item => {\n            if (!this._mozMatchesSelector(item, selector)) {\n                return false;\n            }\n        });\n        return true;\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct childs\n     *\n     * not the rootnodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                //we could use a filter, but for the best performance we dont\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    //TODO append prepend\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaled\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        if (nonce) {\n            script.setAttribute(\"nonce\", nonce);\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independend manner\n     * @param {Object} items the items which need to be detached\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery) {\n        this.eachElem((item) => {\n            let value1: Element = <Element>elem.getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: (theItem: any) => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n    }\n\n    /**\n     * loads and evals a script from a source uri\n     *\n     * @param src the source to be loaded and evaled\n     * @param defer in miliseconds execution default (0 == no defer)\n     * @param charSet\n     */\n    loadScriptEval(src: string, defer: number = 0, charSet: string = \"utf-8\") {\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", src, false);\n\n        if (charSet) {\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-javascript; charset:\" + charSet);\n        }\n\n        xhr.send(null);\n\n        xhr.onload = (responseData: any) => {\n            //defer also means we have to process after the ajax response\n            //has been processed\n            //we can achieve that with a small timeout, the timeout\n            //triggers after the processing is done!\n            if (!defer) {\n                this.globalEval(xhr.responseText.replace(\"\\n\", \"\\r\\n\") + \"\\r\\n//@ sourceURL=\" + src);\n            } else {\n                //TODO not ideal we maybe ought to move to something else here\n                //but since it is not in use yet, it is ok\n                setTimeout(() => {\n                    this.globalEval(xhr.responseText + \"\\r\\n//@ sourceURL=\" + src);\n                }, defer);\n            }\n        };\n\n        xhr.onerror = (data: any) => {\n            throw Error(data);\n        };\n        //since we are synchronous we do it after not with onReadyStateChange\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    parents(tagName: string): DomQuery {\n        const retSet: Set<Element> = new Set();\n        const retArr: Array<Element> = [];\n        const lowerTagName = tagName.toLowerCase();\n\n        let resolveItem = (item: Element) => {\n            if ((item.tagName || \"\").toLowerCase() == lowerTagName && !retSet.has(item)) {\n                retSet.add(item);\n                retArr.push(item);\n            }\n        };\n\n        this.eachElem((item: Element) => {\n            while (item.parentNode || (<any> item).host) {\n                item = <Element>item?.parentNode ?? (<any>item)?.host;\n\n                resolveItem(item);\n                //nested forms not possible, performance shortcut\n                if (tagName == \"form\" && retArr.length) {\n                    return false;\n                }\n            }\n        });\n\n        return new DomQuery(...retArr);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    /**\n     * outerhtml convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        //no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param whilteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(whilteListed: (val: string) => boolean = DEFAULT_JSF_WHITELIST): DomQuery {\n        let finalScripts = [],\n            equi = equalsIgnoreCase,\n            execScrpt = (item) => {\n                let tagName = item.tagName;\n                let itemType = item.type || \"\";\n                if (tagName && equi(tagName, \"script\") &&\n                    (itemType === \"\" || equi(itemType, \"text/javascript\") ||\n                        equi(itemType, \"javascript\") ||\n                        equi(itemType, \"text/ecmascript\") ||\n                        equi(itemType, \"ecmascript\"))) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        //we have to move this into an inner if because chrome otherwise chokes\n                        //due to changing the and order instead of relying on left to right\n                        //if jsf.js is already registered we do not replace it anymore\n                        if (whilteListed(src)) {\n                            if (finalScripts.length) {\n                                //script source means we have to eval the existing\n                                //scripts before running the include\n                                this.globalEval(finalScripts.join(\"\\n\"));\n\n                                finalScripts = [];\n                            }\n                            this.loadScriptEval(src, 0, \"UTF-8\");\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        //TODO this probably needs to be changed due to our new parsing structures\n                        //probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        // we have to run the script under a global context\n                        //we store the script for less calls to eval\n                        finalScripts.push(evalText);\n\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            //script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) //preceding 2, following == 4)\n                .each(item => execScrpt(item));\n\n            if (finalScripts.length) {\n                this.globalEval(finalScripts.join(\"\\n\"));\n            }\n        } catch (e) {\n            if (window.console && window.console.error) {\n                //not sure if we\n                //should use our standard\n                //error mechanisms here\n                //because in the head appendix\n                //method only a console\n                //error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            //the usual ie6 fix code\n            //the IE6 garbage collector is broken\n            //nulling closures helps somewhat to reduce\n            //mem leaks, which are impossible to avoid\n            //at this browser\n            execScrpt = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const applyStyle = (item: Element, style: string) => {\n                let newSS: HTMLStyleElement = document.createElement(\"style\");\n                document.getElementsByTagName(\"head\")[0].appendChild(newSS);\n\n                let styleSheet = newSS.sheet ?? (<any>newSS).styleSheet;\n\n                newSS.setAttribute(\"rel\", item.getAttribute(\"rel\") ?? \"stylesheet\");\n                newSS.setAttribute(\"type\", item.getAttribute(\"type\") ?? \"text/css\");\n\n                if (styleSheet?.cssText ?? false) {\n                    styleSheet.cssText = style;\n                } else {\n                    newSS.appendChild(document.createTextNode(style));\n                }\n            },\n\n            execCss = (item: Element) => {\n                const tagName = item.tagName;\n                if (tagName && equalsIgnoreCase(tagName, \"link\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    applyStyle(item, \"@import url('\" + item.getAttribute(\"href\") + \"');\");\n                } else if (tagName && equalsIgnoreCase(tagName, \"style\") && equalsIgnoreCase(item.getAttribute(\"type\"), \"text/css\")) {\n                    let innerText = [];\n                    //compliant browsers know child nodes\n                    let childNodes: NodeList = item.childNodes;\n                    if (childNodes) {\n                        childNodes.forEach(child => innerText.push((<Element>child).innerHTML || (<CharacterData>child).data));\n                        //non compliant ones innerHTML\n                    } else if (item.innerHTML) {\n                        innerText.push(item.innerHTML);\n                    }\n\n                    applyStyle(item, innerText.join(\"\"));\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string) {\n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let eventClass = \"\";\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an eventClass,\n                // the event firing is going to fail.\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                        eventClass = \"MouseEvents\";\n                        break;\n\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        eventClass = \"HTMLEvents\";\n                        break;\n\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                        break;\n                }\n                let event = doc.createEvent(eventClass);\n                event.initEvent(eventName, true, true); // All events created as bubbling and cancelable.\n\n                event.synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => text1 + joinstr + text2, \"\").value;\n    }\n\n    innerText(joinstr: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinstr), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer usecases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        //browser behavior no element name no encoding (normal submit fails in that case)\n        //https://issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        //lets keep it sideffects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {//no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only inputs, textareas and selects\n            // - elements muest have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 sein to be submittet\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            //let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != Submittables.SELECT &&\n                        elemType != Submittables.BUTTON &&\n                        elemType != Submittables.RESET &&\n                        elemType != Submittables.SUBMIT &&\n                        elemType != Submittables.IMAGE\n                    ) && (\n                        (\n                            elemType != Submittables.CHECKBOX && elemType != Submittables.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let files: any = (<any>element.value).value?.files ?? [];\n                    if (files?.length) {\n                        //xhr level2\n                        target.append(name).value = files[0];\n                    } else {\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let cDataBlock = [];\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n    //TODO this part probably will be removed\n    //because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //from\n    // http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                //the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                //the caretposition is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            //now this is ugly, but not supported input types throw errors for selectionStart\n            //just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        //the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n\n}\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n","/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: DOMParserSupportedType = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new window.DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (<any>window)?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: DOMParserSupportedType = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;"],"sourceRoot":""}